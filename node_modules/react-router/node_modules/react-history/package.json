{
  "name": "react-history",
  "version": "0.13.3",
  "description": "Manage session history with React",
  "repository": {
    "type": "git",
    "url": "git://github.com/ReactTraining/react-history"
  },
  "author": {
    "name": "Michael Jackson"
  },
  "license": "MIT",
  "scripts": {
    "build": "node ./scripts/build.js",
    "build-cjs": "babel ./modules -d . --ignore '__tests__'",
    "build-umd": "webpack modules/index.js umd/react-history.js",
    "build-min": "webpack -p modules/index.js umd/react-history.min.js",
    "prepublish": "node ./scripts/build.js",
    "release": "node ./scripts/release.js",
    "test": "npm run lint && karma start",
    "lint": "eslint modules"
  },
  "dependencies": {
    "history": "^4.0.0"
  },
  "peerDependencies": {
    "react": "15.x",
    "react-dom": "15.x"
  },
  "devDependencies": {
    "babel-cli": "^6.10.1",
    "babel-core": "^6.9.1",
    "babel-eslint": "^6.0.4",
    "babel-loader": "^6.2.4",
    "babel-preset-es2015": "^6.9.0",
    "babel-preset-es2015-loose": "^8.0.0",
    "babel-preset-react": "^6.5.0",
    "babel-preset-stage-1": "^6.5.0",
    "eslint": "^3.3.1",
    "eslint-plugin-import": "^1.8.1",
    "eslint-plugin-react": "^6.1.2",
    "expect": "^1.20.1",
    "gzip-size": "^3.0.0",
    "in-publish": "^2.0.0",
    "karma": "^1.2.0",
    "karma-browserstack-launcher": "^1.0.1",
    "karma-chrome-launcher": "^1.0.1",
    "karma-mocha": "^1.0.1",
    "karma-mocha-reporter": "^2.0.4",
    "karma-sourcemap-loader": "^0.3.7",
    "karma-webpack": "^1.7.0",
    "mocha": "^3.0.2",
    "pretty-bytes": "^4.0.0",
    "react": "^15.3.0",
    "react-dom": "^15.3.0",
    "readline-sync": "^1.4.4",
    "webpack": "^1.13.1"
  },
  "keywords": [
    "react",
    "history",
    "link"
  ],
  "readme": "# react-history [![Travis][build-badge]][build] [![npm package][npm-badge]][npm]\n\n[build-badge]: https://img.shields.io/travis/ReactTraining/react-history/master.svg?style=flat-square\n[build]: https://travis-ci.org/ReactTraining/react-history\n\n[npm-badge]: https://img.shields.io/npm/v/react-history.svg?style=flat-square\n[npm]: https://www.npmjs.com/package/react-history\n\n[`react-history`](https://www.npmjs.com/package/react-history) provides tools to manage session history using [React](https://facebook.github.io/react). It's a thin wrapper around the [`history`](https://www.npmjs.com/package/history) package. In web browsers, this library also transparently manages changes to the URL which makes it easier for creators of single-page applications to support things like bookmarks and the back button.\n\n## Installation\n\nUsing [npm](https://www.npmjs.com/):\n\n    $ npm install --save react-history\n\nThen with a module bundler like [webpack](https://webpack.github.io/), use as you would anything else:\n\n```js\n// using an ES6 transpiler, like babel\nimport { BrowserHistory } from 'react-history'\n\n// not using an ES6 transpiler\nvar BrowserHistory = require('react-history').BrowserHistory\n```\n\nThe UMD build is also available on [unpkg](https://unpkg.com):\n\n```html\n<script src=\"https://unpkg.com/react-history/umd/react-history.min.js\"></script>\n```\n\nYou can find the library on `window.ReactHistory`.\n\n## Usage\n\n`react-history` ships with 3 different history components that you can use depending on your environment.\n\n- `<BrowserHistory>` is for use in modern web browsers that support the [HTML5 history API](http://diveintohtml5.info/history.html) (see [cross-browser compatibility](http://caniuse.com/#feat=history))\n- `<MemoryHistory>` is used as a reference implementation and may also be used in non-DOM environments, like [React Native](https://facebook.github.io/react-native/)\n- `<HashHistory>` is for use in legacy web browsers\n\nDepending on the method you want to use to keep track of history, you'll `import` (or `require`) one of these methods directly from the package root (i.e. `history/BrowserHistory`). For the sake of brevity, the term `<History>` in this document refers to any of these implementations.\n\nBasic usage looks like this:\n\n```js\nimport History from 'react-history/BrowserHistory'\n\nconst App = React.createClass({\n  render() {\n    return (\n      <History>\n        {({ history, action, location }) => (\n          <p>The current URL is {location.pathname}{location.search}{location.hash}. You arrived at this URL via a {action} action.</p>\n        )}\n      </History>\n    )\n  }\n})\n```\n\nThe props for each `<History>`, along with their default values are:\n\n```js\n<BrowserHistory\n  basename=\"\"               // The base URL of the app (see below)\n  forceRefresh={false}      // Set true to force full page refreshes\n  keyLength={6}             // The length of location.key\n  // A function to use to confirm navigation with the user (see below)\n  getUserConfirmation={(message, callback) => callback(window.confirm(message))}\n/>\n\n<MemoryHistory\n  initialEntries={[ '/' ]}  // The initial URLs in the history stack\n  initialIndex={0}          // The starting index in the history stack\n  keyLength={6}             // The length of location.key\n  // A function to use to confirm navigation with the user. Required\n  // if you return string prompts from transition hooks (see below)\n  getUserConfirmation={null}\n/>\n\n<HashHistory\n  basename=\"\"               // The base URL of the app (see below)\n  hashType=\"slash\"          // The hash type to use (see below)\n  // A function to use to confirm navigation with the user (see below)\n  getUserConfirmation={(message, callback) => callback(window.confirm(message))}\n/>\n```\n\n### Listening\n\nWhen you render a `<History>` it will emit an object with an `action` and a `location` object to its `children` function when the URL changes.\n\n```js\n<History>\n  {({ history, action, location }) => (\n    <div>\n      <p>The current URL is {location.pathname}{location.search}{location.hash}.</p>\n      <p>You arrived at this URL via a {action} action.</p>\n    </div>\n  )}\n</History>\n```\n\nThe `history` object is the same object you'd get if you created your own [`history` object](https://npmjs.com/package/history) directly. Please refer to [the `history` docs](https://github.com/mjackson/history/blob/master/README.md) for more information on how to use it. The `location` and `action` properties are also provided for convenience.\n\n### Navigation\n\n`react-history` also provides the following components that may be used to modify the current URL:\n\n- `<Push>` pushes a new entry onto the history stack\n- `<Replace>` replaces the current entry on the history stack with a new one\n- `<Pop>` modifies the current pointer or index into the history stack\n- `<Back>` moves back one entry in the history, shorthand for `<Pop go={-1}/>`\n- `<Forward>` moves forward one entry in the history, shorthand for `<Pop go={1}/>`\n\nThese components are called \"action\" components because they modify the URL. When any of these are rendered, the URL updates and `<History>` objects emit a new location.\n\n`<Push>` and `<Replace>` accept either:\n\n- `path` and `state` props *or*\n- a `location` prop\n\n```js\n// Push a new entry onto the history stack.\n<Push path=\"/home?the=query#the-hash\" state={{ some: 'state' }}/>\n\n// Use a location-like object to push a new entry onto the stack.\n<Push location={{\n  pathname: '/home',\n  search: '?the=query',\n  hash: '#the-hash'\n  state: { some: 'state' }\n}}/>\n```\n\n**Note:** Location state is not supported using `<HashHistory>`.\n\nFor example, you could build a very simple `<Link>` component using a `<Push>`:\n\n```js\nimport React, { PropTypes } from 'react'\nimport { Push } from 'react-history/Actions'\n\nconst Link = React.createClass({\n  propTypes: {\n    to: PropTypes.string.isRequired\n  },\n\n  getInitialState() {\n    return { wasClicked: false }\n  },\n\n  render() {\n    const { to, ...props } = this.props\n\n    // If the <Link> was clicked, update the URL!\n    if (this.state.wasClicked)\n      return <Push path={to}/>\n\n    return (\n      <span {...props} onClick={() => this.setState({ wasClicked: true })}/>\n    )\n  }\n})\n```\n\n**Note:** This `<Link>` implementation is for demonstration purposes only. It is not accessible and does not include many of the nice features of a real hyperlink. If you're looking for a proper `<Link>` implementation, [please use `react-router`](https://www.npmjs.com/package/react-router).\n\n### Blocking Transitions\n\n`react-history` lets you register a prompt message that will be shown to the user before location listeners are notified. This allows you to make sure the user wants to leave the current page before they navigate away. You do this by rendering a `<Prompt>` component.\n\n```js\nimport Prompt from 'react-history/Prompt'\n\nconst Form = React.createClass({\n  getInitialState() {\n    return { inputText: '' }\n  },\n\n  handleChange(event) {\n    this.setState({ inputText: event.target.value })\n  },\n\n  render() {\n    const { inputText } = this.state\n\n    return (\n      <form>\n        <Prompt\n          message=\"Are you sure you want to leave before submitting the form?\"\n          when={inputText}\n        />\n        <input\n          type=\"text\"\n          defaultValue={inputText}\n          onChange={this.handleChange}\n        />\n      </form>\n    )\n  }\n})\n```\n\n**Note:** You'll need to provide a `getUserConfirmation` prop to use `<Prompt>`s with `<MemoryHistory>` (see [the `history` docs](https://github.com/mjackson/history#customizing-the-confirm-dialog)).\n\n### Using a Base URL\n\nIf all the URLs in your app are relative to some other \"base\" URL, use the `basename` option. This option transparently adds the given string to the front of all URLs you use.\n\n```js\n// All URLs transparently have the \"/the/base\" prefix.\n<History basename=\"/the/base\">\n{({ location }) => (\n  // When the URL is /the/base/home, location.pathname is just /home.\n  <p>The current pathname is {location.pathname}.</p>\n)}\n</History>\n```\n\n**Note:** `basename` is not suppported in `<MemoryHistory>` where you have full control over all your URLs.\n\n### Forcing Full Page Refreshes in `<BrowserHistory>`\n\nBy default `<BrowserHistory>` uses HTML5 `pushState` and `replaceState` to prevent reloading the entire page from the server while navigating around. If instead you would like to reload as the URL changes, use the `forceRefresh` option.\n\n```js\n<BrowserHistory forceRefresh/>\n```\n\n### Modifying the Hash Type in `<HashHistory>`\n\nBy default `<HashHistory>` uses a leading slash in hash-based URLs. You can use the `hashType` option to use a different hash formatting.\n\n\n```js\n// The default is to add a leading / to all hashes, so your URLs\n// are like /#/inbox/5. This is also know as the \"slash\" hash type.\n<HashHistory hashType=\"slash\"/>\n\n// You can also omit the leading slash using the \"noslash\" hash type.\n// This gives you URLs like /#inbox/5.\n<HashHistory hashType=\"noslash\"/>\n\n// Support for Google's legacy AJAX URL \"hashbang\" format gives you\n// URLs like /#!/inbox/5.\n<HashHistory hashType=\"hashbang\"/>\n```\n\n## Thanks\n\nThanks to [BrowserStack](https://www.browserstack.com/) for providing the infrastructure that allows us to run our build in real browsers.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ReactTraining/react-history/issues"
  },
  "_id": "react-history@0.13.3",
  "dist": {
    "shasum": "4e1bf73bedf43c861d275b019b3c4e9d0fd789a2"
  },
  "_from": "react-history@^0.13.0",
  "_resolved": "https://registry.npmjs.org/react-history/-/react-history-0.13.3.tgz"
}
