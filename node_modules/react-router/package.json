{
  "name": "react-router",
  "version": "4.0.0-alpha.3",
  "description": "Declarative routing for React",
  "repository": {
    "type": "git",
    "url": "git://github.com/ReactTraining/react-router"
  },
  "license": "MIT",
  "authors": [
    "Michael Jackson",
    "Ryan Florence"
  ],
  "files": [
    "*.js",
    "*.md",
    "umd"
  ],
  "scripts": {
    "start": "echo 'Make sure to `cd website && npm install`' && cd website && npm run dev",
    "release": "node ./scripts/release.js",
    "build-lib": "babel ./modules -d . --ignore '__tests__'",
    "build-umd": "webpack modules/index.js umd/react-router.js",
    "build-min": "webpack -p modules/index.js umd/react-router.min.js",
    "build": "node ./scripts/build.js",
    "prepublish": "node ./scripts/build.js",
    "clean": "rm $(ls modules | grep -v __)",
    "test": "npm run lint && karma start",
    "lint": "eslint modules"
  },
  "dependencies": {
    "history": "^4.0.0",
    "path-to-regexp": "^1.5.3",
    "query-string": "4.2.3",
    "react-history": "^0.13.0"
  },
  "peerDependencies": {
    "react": "15.x"
  },
  "devDependencies": {
    "babel-cli": "^6.10.1",
    "babel-core": "^6.9.1",
    "babel-eslint": "^6.0.4",
    "babel-loader": "^6.2.4",
    "babel-preset-es2015": "^6.14.0",
    "babel-preset-es2015-loose": "^8.0.0",
    "babel-preset-react": "^6.5.0",
    "babel-preset-stage-1": "^6.5.0",
    "eslint": "^2.13.1",
    "eslint-plugin-import": "^1.15.0",
    "eslint-plugin-react": "^5.2.2",
    "expect": "^1.20.1",
    "gzip-size": "^3.0.0",
    "in-publish": "^2.0.0",
    "karma": "^0.13.22",
    "karma-browserstack-launcher": "^1.0.1",
    "karma-chrome-launcher": "^1.0.1",
    "karma-mocha": "^1.0.1",
    "karma-mocha-reporter": "^2.0.4",
    "karma-sourcemap-loader": "^0.3.7",
    "karma-webpack": "^1.7.0",
    "mocha": "^2.5.3",
    "pretty-bytes": "^3.0.1",
    "react": "^15.3.0",
    "react-addons-test-utils": "^15.3.1",
    "react-dom": "^15.3.0",
    "readline-sync": "^1.4.4",
    "webpack": "^1.13.1",
    "webpack-dev-server": "^1.14.1"
  },
  "keywords": [
    "react",
    "router",
    "route",
    "routing",
    "history",
    "link"
  ],
  "readme": "# React Router [![Travis][build-badge]][build]\n\n[build-badge]: https://img.shields.io/travis/ReactTraining/react-router/v4.svg?style=flat-square\n[build]: https://travis-ci.org/ReactTraining/react-router\n\n<img src=\"/logo/Vertical@2x.png\" height=\"150\"/>\n\nDeclarative routing for [React](https://facebook.github.io/react).\n\nReact Router keeps your UI in sync with the URL. Make the URL your first thought, not an after-thought.\n\n## Installation\n\nUsing [npm](https://www.npmjs.com/):\n\n    $ npm install --save react-router@next\n\nThen with a module bundler like [webpack](https://webpack.github.io/), use as you would anything else:\n\n```js\n// using an ES6 transpiler, like babel\nimport { BrowserRouter, Match, Link } from 'react-router'\n\n// not using an ES6 transpiler\nvar BrowserRouter = require('react-router').BrowserRouter\nvar Match = require('react-router').Match\nvar Link = require('react-router').Link\n```\n\nThe UMD build is also available on [unpkg](https://unpkg.com):\n\n```html\n<script src=\"https://unpkg.com/react-router@next/umd/react-router.min.js\"></script>\n```\n\nYou can find the library on `window.ReactRouter`.\n\n## Docs\n\nPlease read [our docs here](https://react-router-website-xvufzcovng.now.sh/).\n\n## v4 FAQ\n\n### Why the huge change? (AGAIN?!)\n\n**tl;dr** Declarative Composability.\n\nWe've never been this excited about React Router. Like you, we've\nlearned a lot about React since we first picked it up. We built a Router\nthe best we knew how along the way. What we've learned most is that we\nlove React because of its **declarative composability**.\n\nAs we looked at the router, it didn't work that way because of the\nstatic route configuration. You couldn't even wrap a Route!\n\n```js\n// NOPE!\nconst CoolRoute = (props) => <Route {...props} cool={true}/>\n```\n\nFor apps to participate in rendering of route components, we had to\ncreate APIs we were never actually comfortable with, like `<Router\ncreateElement render>` and `createRouterMiddleware`. We took\n`createElement` away from you and had to give it back!\n\nWe had to recreate the lifecycle hooks with `onEnter`, `onLeave`, and\n`onChange`. React already has `componentWillMount`,\n`componentWillReceiveProps` and `componentWillUnmount`.\n\nRoute configs described your view hierarchy. Turns out, React components\nalready describe view hierarchy.\n\nTo code-split, we had to introduce `getComponent` and `getChildRoutes`.\nHot module replacement libs had to do specific hacks for routes to work.\nThe list goes on and on.\n\nReact Router was not a React router, it was a routing framework for\nReact. An accidental framework with APIs that were not only redundant\nwith React, but incredibly difficult to build an ecosystem around.\n\nWhat did we do? We took everything we've learned and love about React\n(and we're still learning!) and applied it to routing. It started with\nthe quest to actually render a `<Route>` (we used to just strip their\nprops). It ended with removing the idea of routes completely (surprised\nus too) and a completely component based API, which actually means no\nAPI at all.\n\nYou control routing by rendering components and passing props. Finally,\nwe have a solid base for us and others to build an ecosystem on top of.\n\nIn other words, it's Just Reactâ„¢ and you're going to love it.\n\n### How long until another huge API overhaul?\n\nWe know things have been rocky. Our previous API was fighting against\nReact, causing a ton of churn. With v4, our only API is components that\nreceive props, so, it's hard to imagine a big change again. Now that\nwe're embracing (not fighting) React's declarative composability, we\nthink this API will last as long as React itself, because that's all it\nis.\n\nNot only that, but we're excited to create and encourage building an\necosystem of addons to this stable base.\n\n### Why did you get rid of feature [x]?\n\nWe've been pulled a lot of directions with bleeding edge use-cases that\nnobody really has generic answers for: server rendering, code-splitting\nwhile avoiding waterfalls, anticipating streamed server rendering, loading\ndata before rendering anything, etc. We unconsciously tried to solve this\nstuff when all we really want to be doing is keeping rendered UI in sync\nwith the url. That's our scope of responsibility.\n\nBy using components as our only API, features we had that are important\nto you can be implemented on top of these components.\n\nWe will be creating some addons and hope to see others too.\n\n### What about scrolling?\n\nWe have some code close to being published that will manage the scroll\npositions of window and individual elements.\n\n### What about Redux?\n\nWe have a `<ControlledRouter>` close to being published that makes redux\nintegration with React Router the same as ... uh ... integrating an\n`<input>` with Redux.\n\n### What about route transition hooks? (example needed)\n\nBecause we are just components, you have the component lifecycle as\ntransition hooks. They are completely parallel. The only difference is\nthat the route transition hooks could be asynchronous. The problem with\nthat was you weren't in the render lifecycle so you couldn't use React\nto indicate to the user something was happening.\n\n```js\n<Route onEnter={(_, cb) => {\n  loadStuffForever(() => {\n    // WHAT IS THE USER SEEING RIGHT NOW?\n    cb()\n  })\n}}/>\n```\n\nOne use case was loading data and waiting to render the next screen\nuntil the data landed. With a component, you can save the previous\nchildren, render them while loading, and then render your new children\nwhen you're done. We'll have an example of this eventually.\n\n### I liked seeing all my routes in one place, now what?\n\nCheck out the \"Route Config\" example.\n\n### I want to load data before rendering, now what?\n\nSee below\n\n### The route config is important to the ecosystem, now what?\n\nWe have started an addon that we hope people who are interested in this\nwill take ownership of here: https://github.com/ReactTraining/react-router-addons-routes\n\n### What about upgrading?\n\nWe believe very strongly in iterative migration, not rewrites, for\napplications. We are working on a migration guide, but the basic\nstrategy is that both versions will be runnable in tandem (due to npm\nlimitations, we'll publish the previous version separately so both can\nbe installed).\n\nYou will be able to take routes one-by-one and migrate them to the new\nAPI. Additionally, the config addon mentioned above may help out here.\n\n### What the heck happened to v3?\n\nIt's in beta, will be released shortly. It's basically just v2 but w/o\nany warnings of deprecated 1.0 API.\n\n### Do I have to upgrade?\n\nNo. Leave your package.json at v2/3 and move on with your life. We'll\nbe merging bug fixes for v2/3 indefinitely.\n\n### We're Pumped!\n\nWe've received a ton of great feedback from people we really admire in\nthe React community so we know we've found something special that's a\nbit unprecendented in the world of UI routing.\n\nWe've never been more excited about React Router. It's no longer a\nrouter for React, it is truly a React Router.\n\n\n\n## Thanks\n\nThanks to [our sponsors](/SPONSORS.md) for supporting the development of React Router.\n\nAlso, thanks to [BrowserStack](https://www.browserstack.com/) for providing the infrastructure that allows us to run our build in real browsers.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ReactTraining/react-router/issues"
  },
  "_id": "react-router@4.0.0-alpha.3",
  "dist": {
    "shasum": "b8b75a318cc31d5bfed5e49c05b4379ba6e69d86"
  },
  "_from": "react-router@4.0.0-alpha.3",
  "_resolved": "https://registry.npmjs.org/react-router/-/react-router-4.0.0-alpha.3.tgz"
}
